import Head from 'next/head';
import { useState } from 'react';
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import styles from '../styles/Home.module.css'
// ChakraUi Components
import {
  Heading,
  Box,
  Flex,
  Input,
  Stack,
  IconButton,
  useToast
} from '@chakra-ui/react';

// ChakraUi Icons
import {SearchIcon, CloseIcon} from '@chakra-ui/icons';
// Components
import Character from '../components/Character';


export default function Home(results) {
  const initialState = results;
  const [characters, setCharacters] = useState(initialState.characters);
  const [search, setSearch] = useState("");
  const toast = useToast();


  const handleSubmit = async (e) => {
    e.preventDefault()
    const results = await fetch("/api/SearchCharacters", {
      method: 'post',
      body: search,
    });
    const { characters, error } = await results.json();
    if(error) {
      toast({
        postion: "bottom",
        title: "An error occured",
        description: error,
        status: "error",
        duration: 5000,
        isClosable: true
      })
    } else {
      setCharacters(characters);
    }
  }

  return (
      <Flex 
        direction="column"
        justify="center" 
        align="center"
      >
        <Head>
          <title>NextJS Apollo Crash Course</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Box 
          mb={4} 
          flexDirection="column" 
          align="center" 
          justify="center" 
          py={8}
        >
          <Heading as="h1" size="2xl" mb={8}>
            Rick and Morty{" "}
          </Heading>
          <form onSubmit={handleSubmit}>
            <Stack maxWidth="350px" width="100%" isInline mb={8}>
              <Input 
                placeholder="Search" 
                value={search} 
                border="none" 
                onChange={(e) => setSearch(e.target.value)}
              />
              <IconButton 
                colorScheme="blue" 
                aria-label="Search Database" 
                icon={<SearchIcon/>} 
                disabled={search === ""} 
                type="submit"
              />
              <IconButton
                colorScheme="red"
                aria-label="Reset Button"
                icon={<CloseIcon/>}
                disabled={search === ""} 
                onClick={async () => {
                  setSearch("")
                  setCharacters(initialState.characters)
                }}
              />
            </Stack>
          </form>
          <Character characters={characters} />
        </Box>
        <footer className={styles.footer}>
          Powered by Me
        </footer>
      </Flex>
  );
}

export const getStaticProps = async () => {
  const client = new ApolloClient({
    uri: "https://rickandmortyapi.com/graphql/",
    cache: new InMemoryCache(),
  })

  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1){
          info{
            count
            pages
            next
            prev
          }
          results{
            name
            id
            location{
              id
              name
            }
            origin{
              id
              name
              dimension
            }
            episode{
              id
              episode
              air_date
            }
            image
          }
        }
      }
    `,
  })

  return {
    props: {
      characters: data.characters.results
    }
  }
}
